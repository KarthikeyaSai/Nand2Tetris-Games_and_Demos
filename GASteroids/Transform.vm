function Transform.copy 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 4
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push local 0
push argument 2
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push local 0
push argument 3
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Transform.rotate 6
push argument 5
call Sinus.sin 1
pop local 2
push argument 5
call Sinus.cos 1
pop local 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 4
lt
not
if-goto WHILE_END0
push local 0
push argument 2
add
pop pointer 1
push that 0
push local 3
call Math.multiply 2
push local 0
push argument 3
add
pop pointer 1
push that 0
push local 2
call Math.multiply 2
sub
pop local 4
push local 0
push argument 2
add
pop pointer 1
push that 0
push local 2
call Math.multiply 2
push local 0
push argument 3
add
pop pointer 1
push that 0
push local 3
call Math.multiply 2
add
pop local 5
push local 4
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push constant 50
sub
pop local 4
goto IF_END0
label IF_FALSE0
push local 4
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
push constant 50
add
pop local 4
label IF_FALSE1
label IF_END0
push local 5
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
push constant 50
sub
pop local 5
goto IF_END2
label IF_FALSE2
push local 5
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 5
push constant 50
add
pop local 5
label IF_FALSE3
label IF_END2
push local 0
push argument 0
add
push local 4
push constant 100
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push local 5
push constant 100
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Transform.scale 1
label WHILE_EXP0
push local 0
push argument 4
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push local 0
push argument 2
add
pop pointer 1
push that 0
push argument 5
call Math.multiply 2
push argument 6
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push local 0
push argument 3
add
pop pointer 1
push that 0
push argument 7
call Math.multiply 2
push argument 8
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Transform.translate 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 4
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push local 0
push argument 2
add
pop pointer 1
push that 0
push argument 5
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push local 0
push argument 3
add
pop pointer 1
push that 0
push argument 6
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
